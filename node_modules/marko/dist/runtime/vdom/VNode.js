/* jshint newcap:false */
function VNode() {}

VNode.prototype = {
    bt_: function (finalChildCount) {
        this.bE_ = finalChildCount;
        this.bF_ = 0;
        this.bx_ = null;
        this.bG_ = null;
        this.bu_ = null;
        this.bv_ = null;
    },

    aD_: null,

    get R_() {
        var firstChild = this.bx_;

        if (firstChild && firstChild.bw_) {
            var nestedFirstChild = firstChild.R_;
            // The first child is a DocumentFragment node.
            // If the DocumentFragment node has a first child then we will return that.
            // Otherwise, the DocumentFragment node is not *really* the first child and
            // we need to skip to its next sibling
            return nestedFirstChild || firstChild.at_;
        }

        return firstChild;
    },

    get at_() {
        var nextSibling = this.bv_;

        if (nextSibling) {
            if (nextSibling.bw_) {
                var firstChild = nextSibling.R_;
                return firstChild || nextSibling.at_;
            }
        } else {
            var parentNode = this.bu_;
            if (parentNode && parentNode.bw_) {
                return parentNode.at_;
            }
        }

        return nextSibling;
    },

    bl_: function (child) {
        this.bF_++;

        if (this.bB_ === true) {
            if (child.bH_) {
                var childValue = child.aF_;
                this.bA_ = (this.bA_ || "") + childValue;
            } else {
                throw TypeError();
            }
        } else {
            var lastChild = this.bG_;

            child.bu_ = this;

            if (lastChild) {
                lastChild.bv_ = child;
            } else {
                this.bx_ = child;
            }

            this.bG_ = child;
        }

        return child;
    },

    bC_: function finishChild() {
        if (this.bF_ === this.bE_ && this.bu_) {
            return this.bu_.bC_();
        } else {
            return this;
        }
    }

    // ,toJSON: function() {
    //     var clone = Object.assign({
    //         nodeType: this.nodeType
    //     }, this);
    //
    //     for (var k in clone) {
    //         if (k.startsWith('_')) {
    //             delete clone[k];
    //         }
    //     }
    //     delete clone._nextSibling;
    //     delete clone._lastChild;
    //     delete clone.parentNode;
    //     return clone;
    // }
};

module.exports = VNode;