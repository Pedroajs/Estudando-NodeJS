var getComponentsContext = require("../ComponentsContext").__;
var componentsUtil = require("../util");
var componentLookup = componentsUtil.a_;
var registry = require("../registry");
var modernRenderer = require("../renderer");
var resolveComponentKey = modernRenderer._Y_;
var handleBeginAsync = modernRenderer._Z_;
var beginComponent = require("../beginComponent");
var endComponent = require("../endComponent");

var WIDGETS_BEGIN_ASYNC_ADDED_KEY = "$wa";

function createRendererFunc(templateRenderFunc, componentProps) {
    var typeName = componentProps._l_;
    var assignedId = componentProps.id;
    var isSplit = componentProps.a__ === true;

    return function renderer(input, out, renderingLogic) {
        var outGlobal = out.global;

        if (!outGlobal[WIDGETS_BEGIN_ASYNC_ADDED_KEY]) {
            outGlobal[WIDGETS_BEGIN_ASYNC_ADDED_KEY] = true;
            out.on("beginAsync", handleBeginAsync);
        }

        var getInitialProps;
        var getTemplateData;
        var getInitialState;
        var getWidgetConfig;
        var getInitialBody;

        if (renderingLogic) {
            getInitialProps = renderingLogic.getInitialProps;
            getTemplateData = renderingLogic.getTemplateData;
            getInitialState = renderingLogic.getInitialState;
            getWidgetConfig = renderingLogic.getWidgetConfig;
            getInitialBody = renderingLogic.getInitialBody;
        }

        var widgetConfig;
        var componentBody;
        var componentState;

        var componentsContext = getComponentsContext(out);
        var globalComponentsContext = componentsContext.N_;

        var component = globalComponentsContext.O_;

        var isRerender = component !== undefined;
        var id = assignedId;
        var isExisting;
        var parentComponentDef;
        var ownerComponentDef = out.aa_;
        var ownerComponentId = ownerComponentDef && ownerComponentDef.id;
        var key = out.ab_;
        var customEvents = out.ac_;

        if (component) {
            id = component.id;
            isExisting = true;
            globalComponentsContext.O_ = null;
        } else {
            if (parentComponentDef = componentsContext._p_) {
                out.aa_ = null;

                if (key != null) {
                    key = key.toString();
                }
                id = id || resolveComponentKey(key, parentComponentDef);
            } else if (parentComponentDef) {
                id = parentComponentDef._k_();
            } else {
                id = globalComponentsContext._k_();
            }
        }

        if (registry.ad_ && typeName) {
            if (renderingLogic) delete renderingLogic.onRender;
            component = registry._n_(renderingLogic || {}, id, input, out, typeName, customEvents, ownerComponentId);
        } else {
            if (!component) {
                if (isRerender) {
                    // Look in in the DOM to see if a component with the same ID and type already exists.
                    component = componentLookup[id];
                    if (component && component._l_ !== typeName) {
                        component = undefined;
                    }
                }

                if (component) {
                    isExisting = true;
                } else {
                    isExisting = false;
                    // We need to create a new instance of the component
                    if (typeName) {
                        component = registry._n_(typeName, id);
                    }
                }
            }
        }

        if (component) {
            component.q_ = true;
        }

        if (input) {
            if (getWidgetConfig) {
                // If getWidgetConfig() was implemented then use that to
                // get the component config. The component config will be passed
                // to the component constructor. If rendered on the server the
                // component config will be serialized to a JSON-like data
                // structure and stored in a "data-w-config" attribute.
                widgetConfig = getWidgetConfig(input, out);
            } else {
                widgetConfig = input.widgetConfig;
            }

            if (widgetConfig) {
                component.$c = widgetConfig;
            }

            if (getInitialBody) {
                // If we have component a component body then pass it to the template
                // so that it is available to the component tag and can be inserted
                // at the w-body marker
                componentBody = getInitialBody(input, out);
            }

            // If we do not have state then we need to go through the process
            // of converting the input to a component state, or simply normalizing
            // the input using getInitialProps

            if (getInitialProps) {
                // This optional method is used to normalize input state
                input = getInitialProps(input, out) || {};
            }

            if (getInitialState) {
                // This optional method is used to derive the component state
                // from the input properties
                component.state = componentState = getInitialState(input, out);
            }

            if (!componentBody) {
                // Default to using the nested content as the component body
                componentBody = input.renderBody;
            }
        }

        var isFakeComponent = false;

        if (!component) {
            isFakeComponent = true;
            component = {
                id: id,
                u_: {}
            };
        } else {
            componentState = component.T_ || componentState;
        }

        var templateInput = getTemplateData ? getTemplateData(componentState, input, out) : componentState || input || {};

        var componentDef = beginComponent(componentsContext, component, key, ownerComponentDef, isSplit);

        // This is a hack, but we have to swap out the component instance stored with this node
        var vComponentNode = out.ae_;

        componentDef._a_ = isFakeComponent ? null : component;
        componentDef._c_ = isExisting;
        componentDef._P_ = true;
        componentDef.b = component.af_ = componentBody || component.af_ || "%FN";
        componentDef.c = function (widgetConfig) {
            component.$c = widgetConfig;
        };

        componentDef.t = function (typeName) {
            if (typeName) {
                vComponentNode._a_ = this._a_ = component = registry._n_(typeName, component.id);
            }
        };

        if (!isFakeComponent && !registry.ad_) {
            component.b_("_U_");
        }

        // Render the template associated with the component using the final template
        // data that we constructed
        templateRenderFunc(templateInput, out, componentDef, componentDef, component);

        if (customEvents && componentDef._a_) {
            if (registry.ad_) {
                componentDef.k_ = customEvents;
                componentDef.d_ = ownerComponentId;
            } else {
                componentDef._a_.V_(customEvents, ownerComponentId);
            }
        }

        endComponent(out, componentDef);
        componentsContext._p_ = parentComponentDef;
    };
}

module.exports = createRendererFunc;